%!PS-Adobe-2.0 EPSF-2.0
%%Title: heatmap.eps
%%Creator: gnuplot 4.4 patchlevel 3
%%CreationDate: Thu Apr 30 13:09:57 2015
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -66 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (heatmap.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 3)
  /Author (mateus)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Thu Apr 30 13:09:57 2015)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 302 lineto 50 302 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
gsave % colour palette begin
/maxcolors 0 def
/HSV2RGB {  exch dup 0.0 eq {pop exch pop dup dup} % achromatic gray
  { /HSVs exch def /HSVv exch def 6.0 mul dup floor dup 3 1 roll sub
     /HSVf exch def /HSVi exch cvi def /HSVp HSVv 1.0 HSVs sub mul def
	 /HSVq HSVv 1.0 HSVs HSVf mul sub mul def 
	 /HSVt HSVv 1.0 HSVs 1.0 HSVf sub mul sub mul def
	 /HSVi HSVi 6 mod def 0 HSVi eq {HSVv HSVt HSVp}
	 {1 HSVi eq {HSVq HSVv HSVp}{2 HSVi eq {HSVp HSVv HSVt}
	 {3 HSVi eq {HSVp HSVq HSVv}{4 HSVi eq {HSVt HSVp HSVv}
	 {HSVv HSVp HSVq} ifelse} ifelse} ifelse} ifelse} ifelse
  } ifelse} def
/Constrain {
  dup 0 lt {0 exch pop}{dup 1 gt {1 exch pop} if} ifelse} def
/YIQ2RGB {
  3 copy -1.702 mul exch -1.105 mul add add Constrain 4 1 roll
  3 copy -0.647 mul exch -0.272 mul add add Constrain 5 1 roll
  0.621 mul exch -0.956 mul add add Constrain 3 1 roll } def
/CMY2RGB {  1 exch sub exch 1 exch sub 3 2 roll 1 exch sub 3 1 roll exch } def
/XYZ2RGB {  3 copy -0.9017 mul exch -0.1187 mul add exch 0.0585 mul exch add
  Constrain 4 1 roll 3 copy -0.0279 mul exch 1.999 mul add exch
  -0.9844 mul add Constrain 5 1 roll -0.2891 mul exch -0.5338 mul add
  exch 1.91 mul exch add Constrain 3 1 roll} def
/SelectSpace {ColorSpace (HSV) eq {HSV2RGB}{ColorSpace (XYZ) eq {
  XYZ2RGB}{ColorSpace (CMY) eq {CMY2RGB}{ColorSpace (YIQ) eq {YIQ2RGB}
  if} ifelse} ifelse} ifelse} def
/InterpolatedColor true def
/grayindex {/gidx 0 def
  {GrayA gidx get grayv ge {exit} if /gidx gidx 1 add def} loop} def
/dgdx {grayv GrayA gidx get sub GrayA gidx 1 sub get
  GrayA gidx get sub div} def 
/redvalue {RedA gidx get RedA gidx 1 sub get
  RedA gidx get sub dgdxval mul add} def
/greenvalue {GreenA gidx get GreenA gidx 1 sub get
  GreenA gidx get sub dgdxval mul add} def
/bluevalue {BlueA gidx get BlueA gidx 1 sub get
  BlueA gidx get sub dgdxval mul add} def
/interpolate {
  grayindex grayv GrayA gidx get sub abs 1e-5 le
    {RedA gidx get GreenA gidx get BlueA gidx get}
    {/dgdxval dgdx def redvalue greenvalue bluevalue} ifelse} def
/GrayA [0 .5 1 ] def
/RedA [0 1 1 ] def
/GreenA [1 1 0 ] def
/BlueA [0 0 0 ] def
/pm3dround {maxcolors 0 gt {dup 1 ge
	{pop 1} {maxcolors mul floor maxcolors 1 sub div} ifelse} if} def
/pm3dGamma 1.0 1.5 Gamma mul div def
/ColorSpace (RGB) def
Color InterpolatedColor or { % COLOUR vs. GRAY map
  InterpolatedColor { %% Interpolation vs. RGB-Formula
    /g {stroke pm3dround /grayv exch def interpolate
        SelectSpace setrgbcolor} bind def
  }{
  /g {stroke pm3dround dup cF7 Constrain exch dup cF5 Constrain exch cF15 Constrain 
       SelectSpace setrgbcolor} bind def
  } ifelse
}{
  /g {stroke pm3dround pm3dGamma exp setgray} bind def
} ifelse
1.000 UL
LTb
1.000 UP
% Begin plot #1
LCb setrgbcolor
/Helvetica findfont 200 scalefont setfont
5266 3830 M
('normalized_data' matrix) Rshow
1.000 UL
LT0
LTb
%%%%BeginImage
gsave 1150 1046 N 1150 4193 L 6049 4193 L 6049 1046 L Z clip
InterpretLevel1 {
  %% Construct a box instead of image
  LTb
  1150 4193 M
  4899 0 V
  0 -3147 V
  -4899 0 V
  1150 4193 L
  40 -110 R
  (PS level 2 image) Lshow
  % Read data but ignore it
  /imagebuf 128 string def
  currentfile imagebuf readstring
} {
gsave
1150 4193 translate
4899 -3147 scale
%%%%BeginPalette
[ /Indexed
  /DeviceRGB 255
  <
   00ff00 02ff00 04ff00 06ff00 08ff00 0aff00 0cff00 0eff00
   10ff00 12ff00 14ff00 16ff00 18ff00 1aff00 1cff00 1eff00
   20ff00 22ff00 24ff00 26ff00 28ff00 2aff00 2cff00 2eff00
   30ff00 32ff00 34ff00 36ff00 38ff00 3aff00 3cff00 3eff00
   40ff00 42ff00 44ff00 46ff00 48ff00 4aff00 4cff00 4eff00
   50ff00 52ff00 54ff00 56ff00 58ff00 5aff00 5cff00 5eff00
   60ff00 62ff00 64ff00 66ff00 68ff00 6aff00 6cff00 6eff00
   70ff00 72ff00 74ff00 76ff00 78ff00 7aff00 7cff00 7eff00
   80ff00 82ff00 84ff00 86ff00 88ff00 8aff00 8cff00 8eff00
   90ff00 92ff00 94ff00 96ff00 98ff00 9aff00 9cff00 9eff00
   a0ff00 a2ff00 a4ff00 a6ff00 a8ff00 aaff00 acff00 aeff00
   b0ff00 b2ff00 b4ff00 b6ff00 b8ff00 baff00 bcff00 beff00
   c0ff00 c2ff00 c4ff00 c6ff00 c8ff00 caff00 ccff00 ceff00
   d0ff00 d2ff00 d4ff00 d6ff00 d8ff00 daff00 dcff00 deff00
   e0ff00 e2ff00 e4ff00 e6ff00 e8ff00 eaff00 ecff00 eeff00
   f0ff00 f2ff00 f4ff00 f6ff00 f8ff00 faff00 fcff00 feff00
   fffe00 fffc00 fffa00 fff800 fff600 fff400 fff200 fff000
   ffee00 ffec00 ffea00 ffe800 ffe600 ffe400 ffe200 ffe000
   ffde00 ffdc00 ffda00 ffd800 ffd600 ffd400 ffd200 ffd000
   ffce00 ffcc00 ffca00 ffc800 ffc600 ffc400 ffc200 ffc000
   ffbe00 ffbc00 ffba00 ffb800 ffb600 ffb400 ffb200 ffb000
   ffae00 ffac00 ffaa00 ffa800 ffa600 ffa400 ffa200 ffa000
   ff9e00 ff9c00 ff9a00 ff9800 ff9600 ff9400 ff9200 ff9000
   ff8e00 ff8c00 ff8a00 ff8800 ff8600 ff8400 ff8200 ff8000
   ff7e00 ff7c00 ff7a00 ff7800 ff7600 ff7400 ff7200 ff7000
   ff6e00 ff6c00 ff6a00 ff6800 ff6600 ff6400 ff6200 ff6000
   ff5e00 ff5c00 ff5a00 ff5800 ff5600 ff5400 ff5200 ff5000
   ff4e00 ff4c00 ff4a00 ff4800 ff4600 ff4400 ff4200 ff4000
   ff3e00 ff3c00 ff3a00 ff3800 ff3600 ff3400 ff3200 ff3000
   ff2e00 ff2c00 ff2a00 ff2800 ff2600 ff2400 ff2200 ff2000
   ff1e00 ff1c00 ff1a00 ff1800 ff1600 ff1400 ff1200 ff1000
   ff0e00 ff0c00 ff0a00 ff0800 ff0600 ff0400 ff0200 ff0000
  >
] setcolorspace
%%%%EndPalette
<<
  /ImageType 1
  /Width 10
  /Height 10
  /BitsPerComponent 8
  /ImageMatrix [ 10 0 0 10 0 0 ]
  /Decode [ 0 255 ]
  /DataSource currentfile /ASCII85Decode filter
  /MultipleDataSources false
  /Interpolate false
>>
image
} ifelse
DE7b&3*[UO/qF!%<-iH^)*S!PE(:l^AnWu]4X48V!#ILHJ28&ds8QEORK"sSs'4'[BN_C(2.g_cs3V
F_=jIluH3aIcEtN(l!$"r<s8Ql^Zi;1=s#U2[s8UUK??#p^~>
InterpretLevel1 not {
  grestore
} if
grestore
%%%%EndImage
% End plot #1
1.000 UL
LTb
1150 4193 N
0 -3147 V
4899 0 V
0 3147 V
-4899 0 V
Z stroke
1.000 UL
LTb
1641 1047 M
0 82 V
stroke
1641 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (1.1)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
1641 4193 M
0 -82 V
2131 1047 M
0 82 V
stroke
2131 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (1.2)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
2131 4193 M
0 -82 V
2621 1047 M
0 82 V
stroke
2621 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (2.1)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
2621 4193 M
0 -82 V
3111 1047 M
0 82 V
stroke
3111 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (2.2)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
3111 4193 M
0 -82 V
3600 1047 M
0 82 V
stroke
3600 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (3.1)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
3600 4193 M
0 -82 V
4089 1047 M
0 82 V
stroke
4089 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (3.2)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
4089 4193 M
0 -82 V
4579 1047 M
0 82 V
stroke
4579 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (3.3)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
4579 4193 M
0 -82 V
5069 1047 M
0 82 V
stroke
5069 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (4.1)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
5069 4193 M
0 -82 V
5559 1047 M
0 82 V
stroke
5559 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (4.2)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
5559 4193 M
0 -82 V
6049 1047 M
0 82 V
stroke
6049 787 M
[ [(Helvetica) 170.0 0.0 true true 0 (4.3)]
] -56.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
6049 4193 M
0 -82 V
1151 1362 M
82 0 V
stroke
995 1362 M
[ [(Helvetica) 170.0 0.0 true true 0 (1.1)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 1362 M
-82 0 V
1151 1676 M
82 0 V
stroke
995 1676 M
[ [(Helvetica) 170.0 0.0 true true 0 (1.2)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 1676 M
-82 0 V
1151 1991 M
82 0 V
stroke
995 1991 M
[ [(Helvetica) 170.0 0.0 true true 0 (2.1)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 1991 M
-82 0 V
1151 2306 M
82 0 V
stroke
995 2306 M
[ [(Helvetica) 170.0 0.0 true true 0 (2.2)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 2306 M
-82 0 V
1151 2620 M
82 0 V
stroke
995 2620 M
[ [(Helvetica) 170.0 0.0 true true 0 (3.1)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 2620 M
-82 0 V
1151 2934 M
82 0 V
stroke
995 2934 M
[ [(Helvetica) 170.0 0.0 true true 0 (3.2)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 2934 M
-82 0 V
1151 3249 M
82 0 V
stroke
995 3249 M
[ [(Helvetica) 170.0 0.0 true true 0 (3.3)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 3249 M
-82 0 V
1151 3564 M
82 0 V
stroke
995 3564 M
[ [(Helvetica) 170.0 0.0 true true 0 (4.1)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 3564 M
-82 0 V
1151 3878 M
82 0 V
stroke
995 3878 M
[ [(Helvetica) 170.0 0.0 true true 0 (4.2)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 3878 M
-82 0 V
1151 4193 M
82 0 V
stroke
995 4193 M
[ [(Helvetica) 170.0 0.0 true true 0 (4.3)]
] -56.7 MRshow
1.000 UL
LTb
1.000 UL
LTb
6049 4193 M
-82 0 V
stroke
1150 4193 N
0 -3147 V
4899 0 V
0 3147 V
-4899 0 V
Z stroke
stroke gsave	%% draw gray scale smooth box
maxcolors 0 gt {/imax maxcolors def} {/imax 1024 def} ifelse
6171 1046 translate 245 3147 scale 0 setlinewidth
/ystep 1 imax div def /y0 0 def /ii 0 def
{ y0 g 0 y0 N 1 0 V 0 ystep V -1 0 f
/y0 y0 ystep add def /ii ii 1 add def
ii imax ge {exit} if } loop
grestore 0 setgray
1.000 UL
LTb
6171 1046 N
245 0 V
0 3147 V
-245 0 V
0 -3147 V
Z stroke
1.000 UL
LTb
1.000 UL
LTb
6416 1046 M
-63 0 V
stroke
6536 1046 M
[ [(Helvetica) 170.0 0.0 true true 0 ( 0)]
] -56.7 MLshow
1.000 UL
LTb
6171 1046 M
63 0 V
182 629 R
-63 0 V
stroke
6536 1675 M
[ [(Helvetica) 170.0 0.0 true true 0 ( 0.2)]
] -56.7 MLshow
1.000 UL
LTb
6171 1675 M
63 0 V
182 629 R
-63 0 V
stroke
6536 2304 M
[ [(Helvetica) 170.0 0.0 true true 0 ( 0.4)]
] -56.7 MLshow
1.000 UL
LTb
6171 2304 M
63 0 V
182 630 R
-63 0 V
stroke
6536 2934 M
[ [(Helvetica) 170.0 0.0 true true 0 ( 0.6)]
] -56.7 MLshow
1.000 UL
LTb
6171 2934 M
63 0 V
182 629 R
-63 0 V
stroke
6536 3563 M
[ [(Helvetica) 170.0 0.0 true true 0 ( 0.8)]
] -56.7 MLshow
1.000 UL
LTb
6171 3563 M
63 0 V
182 630 R
-63 0 V
stroke
6536 4193 M
[ [(Helvetica) 170.0 0.0 true true 0 ( 1)]
] -56.7 MLshow
1.000 UL
LTb
6171 4193 M
63 0 V
stroke
LCb setrgbcolor
7076 2619 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 220.0 0.0 true true 0 (Peering Affinity)]
] -73.3 MCshow
grestore
LTb
1.000 UP
grestore % colour palette end
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
